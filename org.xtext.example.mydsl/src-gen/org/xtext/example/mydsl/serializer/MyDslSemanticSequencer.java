/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;
import zNotationEcore.Schema;
import zNotationEcore.SchemaState;
import zNotationEcore.StateChangeOperator;
import zNotationEcore.Variable;
import zNotationEcore.ZNotationEcorePackage;
import zNotationEcore.ZNotationModel;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ZNotationEcorePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ZNotationEcorePackage.SCHEMA:
				sequence_Schema(context, (Schema) semanticObject); 
				return; 
			case ZNotationEcorePackage.SCHEMA_STATE:
				sequence_SchemaState(context, (SchemaState) semanticObject); 
				return; 
			case ZNotationEcorePackage.STATE_CHANGE_OPERATOR:
				sequence_StateChangeOperator(context, (StateChangeOperator) semanticObject); 
				return; 
			case ZNotationEcorePackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case ZNotationEcorePackage.ZNOTATION_MODEL:
				sequence_ZNotationModel(context, (ZNotationModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SchemaState returns SchemaState
	 *
	 * Constraint:
	 *     (statechangeoperator=[StateChangeOperator|EString]? (variable+=Variable variable+=Variable*)?)
	 */
	protected void sequence_SchemaState(ISerializationContext context, SchemaState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Schema returns Schema
	 *
	 * Constraint:
	 *     (Title=EString? schemastate=[SchemaState|EString]?)
	 */
	protected void sequence_Schema(ISerializationContext context, Schema semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateChangeOperator returns StateChangeOperator
	 *
	 * Constraint:
	 *     StateChangeType=EString?
	 */
	protected void sequence_StateChangeOperator(ISerializationContext context, StateChangeOperator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (Name=EString? Value=EString? Type=EString?)
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ZNotationModel returns ZNotationModel
	 *
	 * Constraint:
	 *     (ModelName=EString? (schema+=Schema schema+=Schema*)?)
	 */
	protected void sequence_ZNotationModel(ISerializationContext context, ZNotationModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
